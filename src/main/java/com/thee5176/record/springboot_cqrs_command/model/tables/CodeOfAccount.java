/*
 * This file is generated by jOOQ.
 */
package com.thee5176.record.springboot_cqrs_command.model.tables;


import com.thee5176.record.springboot_cqrs_command.model.Keys;
import com.thee5176.record.springboot_cqrs_command.model.Public;
import com.thee5176.record.springboot_cqrs_command.model.enums.BalanceType;
import com.thee5176.record.springboot_cqrs_command.model.enums.Element;
import com.thee5176.record.springboot_cqrs_command.model.tables.Entries.EntriesPath;
import com.thee5176.record.springboot_cqrs_command.model.tables.records.CodeOfAccountRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 勘定科目(COA) - フレームワークの科目を活用する
 * - 青色申告: https://biz.moneyforward.com/tax_return/basic/12079/
 * - IFRS: https://www.ifrs-gaap.com/basic-ifrs-coa
 * - GAAP: https://www.ifrs-gaap.com/basic-us-gaap-coa

 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CodeOfAccount extends TableImpl<CodeOfAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.code_of_account</code>
     */
    public static final CodeOfAccount CODE_OF_ACCOUNT = new CodeOfAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeOfAccountRecord> getRecordType() {
        return CodeOfAccountRecord.class;
    }

    /**
     * The column <code>public.code_of_account.code</code>.
     */
    public final TableField<CodeOfAccountRecord, Integer> CODE = createField(DSL.name("code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.code_of_account.title</code>. 科目名（例：現金、売掛金など）
     */
    public final TableField<CodeOfAccountRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR.nullable(false), this, "科目名（例：現金、売掛金など）");

    /**
     * The column <code>public.code_of_account.level</code>.
     */
    public final TableField<CodeOfAccountRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.code_of_account.element</code>. 勘定科目
     */
    public final TableField<CodeOfAccountRecord, Element> ELEMENT = createField(DSL.name("element"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Element.class), this, "勘定科目");

    /**
     * The column <code>public.code_of_account.type</code>. 借・貸
     */
    public final TableField<CodeOfAccountRecord, BalanceType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(BalanceType.class), this, "借・貸");

    private CodeOfAccount(Name alias, Table<CodeOfAccountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CodeOfAccount(Name alias, Table<CodeOfAccountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("勘定科目(COA) - フレームワークの科目を活用する\n- 青色申告: https://biz.moneyforward.com/tax_return/basic/12079/\n- IFRS: https://www.ifrs-gaap.com/basic-ifrs-coa\n- GAAP: https://www.ifrs-gaap.com/basic-us-gaap-coa\n"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.code_of_account</code> table reference
     */
    public CodeOfAccount(String alias) {
        this(DSL.name(alias), CODE_OF_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.code_of_account</code> table reference
     */
    public CodeOfAccount(Name alias) {
        this(alias, CODE_OF_ACCOUNT);
    }

    /**
     * Create a <code>public.code_of_account</code> table reference
     */
    public CodeOfAccount() {
        this(DSL.name("code_of_account"), null);
    }

    public <O extends Record> CodeOfAccount(Table<O> path, ForeignKey<O, CodeOfAccountRecord> childPath, InverseForeignKey<O, CodeOfAccountRecord> parentPath) {
        super(path, childPath, parentPath, CODE_OF_ACCOUNT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CodeOfAccountPath extends CodeOfAccount implements Path<CodeOfAccountRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CodeOfAccountPath(Table<O> path, ForeignKey<O, CodeOfAccountRecord> childPath, InverseForeignKey<O, CodeOfAccountRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CodeOfAccountPath(Name alias, Table<CodeOfAccountRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CodeOfAccountPath as(String alias) {
            return new CodeOfAccountPath(DSL.name(alias), this);
        }

        @Override
        public CodeOfAccountPath as(Name alias) {
            return new CodeOfAccountPath(alias, this);
        }

        @Override
        public CodeOfAccountPath as(Table<?> alias) {
            return new CodeOfAccountPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CodeOfAccountRecord> getPrimaryKey() {
        return Keys.CODE_OF_ACCOUNT_PKEY;
    }

    private transient EntriesPath _entries;

    /**
     * Get the implicit to-many join path to the <code>public.entries</code>
     * table
     */
    public EntriesPath entries() {
        if (_entries == null)
            _entries = new EntriesPath(this, null, Keys.ENTRIES__ENTRIES_COA_FKEY.getInverseKey());

        return _entries;
    }

    @Override
    public CodeOfAccount as(String alias) {
        return new CodeOfAccount(DSL.name(alias), this);
    }

    @Override
    public CodeOfAccount as(Name alias) {
        return new CodeOfAccount(alias, this);
    }

    @Override
    public CodeOfAccount as(Table<?> alias) {
        return new CodeOfAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeOfAccount rename(String name) {
        return new CodeOfAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeOfAccount rename(Name name) {
        return new CodeOfAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeOfAccount rename(Table<?> name) {
        return new CodeOfAccount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount where(Condition condition) {
        return new CodeOfAccount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeOfAccount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeOfAccount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeOfAccount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CodeOfAccount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CodeOfAccount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
